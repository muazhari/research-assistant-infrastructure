services:
  nginx-one:
    image: nginx:latest
    hostname: ${NGINX_ONE_HOST}
    deploy:
      replicas: 1
    ports:
      - '${GATEWAY_FRONTEND_PORT}:${GATEWAY_FRONTEND_PORT}'
      - '${GATEWAY_BACKEND_PORT}:${GATEWAY_BACKEND_PORT}'
      - '${GATEWAY_REDIS_PORT}:${GATEWAY_REDIS_PORT}'
      - '${GATEWAY_COCKROACH_NODE_PORT}:${GATEWAY_COCKROACH_NODE_PORT}'
      - '${GATEWAY_COCKROACH_SQL_PORT}:${GATEWAY_COCKROACH_SQL_PORT}'
      - '${GATEWAY_COCKROACH_HTTP_PORT}:${GATEWAY_COCKROACH_HTTP_PORT}'
      - '${GATEWAY_MILVUS_PORT}:${GATEWAY_MILVUS_PORT}'
      - '${GATEWAY_MINIO_NODE_PORT}:${GATEWAY_MINIO_NODE_PORT}'
      - '${GATEWAY_MINIO_CONSOLE_PORT}:${GATEWAY_MINIO_CONSOLE_PORT}'
      - '${GATEWAY_SIGNOZ_FRONTEND_PORT}:${GATEWAY_SIGNOZ_FRONTEND_PORT}'
    volumes:
      - ./nginx/one/data:/etc/nginx
      - ./nginx/one/template.nginx.conf:/etc/nginx/template.nginx.conf
    env_file:
      - "./.env"
    entrypoint: [ "/bin/sh", "-c" ]
    command:
      - |-
        envsubst < /etc/nginx/template.nginx.conf > /etc/nginx/nginx.conf \
        && \
        nginx -t \
        && \
        nginx -g "daemon off;"
    healthcheck:
      test: service nginx status || exit 1
    depends_on:
      #      - frontend
      #      - backend
      - redis-one
      - cockroach-one
      - milvus-standalone
      - nginx-two
      - signoz-frontend
  nginx-two:
    image: nginx:latest
    hostname: ${NGINX_TWO_HOST}
    deploy:
      replicas: 1
    volumes:
      - ./nginx/two/data:/etc/nginx
      - ./nginx/two/template.nginx.conf:/etc/nginx/template.nginx.conf
    env_file:
      - "./.env"
    entrypoint: [ "/bin/sh", "-c" ]
    command:
      - |-
        envsubst < /etc/nginx/template.nginx.conf > /etc/nginx/nginx.conf \
        && \
        nginx -t \
        && \
        nginx -g "daemon off;"
    healthcheck:
      test: service nginx status || exit 1
    depends_on:
      - etcd-one
      - minio-one
  redis-init:
    image: redis:latest
    deploy:
      replicas: 1
    entrypoint: [ "redis-cli" ]
    command:
      - --pass
      - ${GATEWAY_REDIS_PASSWORD}
      - --cluster
      - create
      - ${REDIS_ONE_HOST}:${REDIS_ONE_PORT}
      - --cluster-replicas
      - "0"
      - --cluster-yes
    depends_on:
      - nginx-one
  cockroach-init:
    image: cockroachdb/cockroach:latest
    deploy:
      replicas: 1
    volumes:
      - "../migration/cockroach:/docker-entrypoint-initdb.d"
    entrypoint: [ "/bin/sh", "-c" ]
    command:
      - |-
        cockroach init --host=${GATEWAY_HOST}:${GATEWAY_COCKROACH_NODE_PORT} --insecure \
        && \
        cockroach sql --host=${GATEWAY_HOST}:${GATEWAY_COCKROACH_SQL_PORT} --insecure \
        --execute="CREATE ROLE IF NOT EXISTS \"${GATEWAY_COCKROACH_USER}\" WITH LOGIN;" \
        --execute="CREATE DATABASE IF NOT EXISTS \"${GATEWAY_COCKROACH_DATABASE}\";" \
        --execute="GRANT ALL ON DATABASE \"${GATEWAY_COCKROACH_DATABASE}\" TO \"${GATEWAY_COCKROACH_USER}\";" \
        --execute="\c ${GATEWAY_COCKROACH_DATABASE};" \
        --execute="ALTER DEFAULT PRIVILEGES GRANT ALL ON TABLES TO \"${GATEWAY_COCKROACH_USER}\";" \
        --execute="ALTER DEFAULT PRIVILEGES GRANT ALL ON SEQUENCES TO \"${GATEWAY_COCKROACH_USER}\";" \
        && \
        cockroach sql --host=${GATEWAY_HOST}:${GATEWAY_COCKROACH_SQL_PORT} --insecure \
        --database=${GATEWAY_COCKROACH_DATABASE} \
        --file=/docker-entrypoint-initdb.d/init.sql
    depends_on:
      - nginx-one
  #  frontend:
  #    image: research-assistant-frontend:latest
  #    deploy:
  #      replicas: 3
  #    hostname: ${GATEWAY_FRONTEND_HOST}
  #    entrypoint: [ "/bin/sh", "-c" ]
  #    command:
  #      - |-
  #        python3 run.py
  #    healthcheck:
  #      test: netstat -tln | grep ${GATEWAY_FRONTEND_PORT} || exit 1
  #  backend:
  #    image: research-assistant-backend:latest
  #    hostname: ${GATEWAY_BACKEND_HOST}
  #    entrypoint: [ "/bin/sh", "-c" ]
  #    command:
  #      - |-
  #        python3 run.py
  #    healthcheck:
  #      test: netstat -tln | grep ${GATEWAY_BACKEND_PORT} || exit 1
  #    deploy:
  #      replicas: 1
  #      resources:
  #        reservations:
  #          devices:
  #            - driver: nvidia
  #              capabilities: [ "gpu" ]
  #              device_ids: [ "0" ]
  redis-one:
    image: redis:latest
    deploy:
      replicas: 1
    hostname: ${REDIS_ONE_HOST}
    volumes:
      - ./redis/one/data:/data
    entrypoint: [ "redis-server" ]
    command:
      - --port
      - ${REDIS_ONE_PORT}
      - --requirepass
      - ${REDIS_ONE_PASSWORD}
      - --cluster-enabled yes
      - --cluster-config-file nodes.conf
      - --cluster-node-timeout 5000
  redis-insight-one:
    image: oblakstudio/redisinsight:latest
    deploy:
      replicas: 1
    hostname: ${REDIS_INSIGHT_ONE_HOST}
    volumes:
      - ./redis-insight/one/data:/db
  cockroach-one:
    image: cockroachdb/cockroach:latest
    deploy:
      replicas: 1
    hostname: ${COCKROACH_ONE_HOST}
    volumes:
      - ./cockroach/one/data:/cockroach/cockroach-data
    entrypoint: [ "cockroach" ]
    command:
      - start
      - --advertise-addr=${COCKROACH_ONE_HOST}:${COCKROACH_ONE_NODE_PORT}
      - --http-addr=${COCKROACH_ONE_HOST}:${COCKROACH_ONE_HTTP_PORT}
      - --listen-addr=${COCKROACH_ONE_HOST}:${COCKROACH_ONE_NODE_PORT}
      - --sql-addr=${COCKROACH_ONE_HOST}:${COCKROACH_ONE_SQL_PORT}
      - --join=${COCKROACH_ONE_HOST}:${COCKROACH_ONE_NODE_PORT}
      - --insecure
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:${COCKROACH_ONE_HTTP_PORT}/health?ready=1" ]
  etcd-one:
    image: quay.io/coreos/etcd:latest
    deploy:
      replicas: 1
    hostname: ${ETCD_ONE_HOST}
    volumes:
      - ./etcd/one/data:/etcd
    entrypoint: [ "etcd" ]
    command:
      - --data-dir=/etcd
      - --name=${ETCD_ONE_NAME}
      - --advertise-client-urls=http://${ETCD_ONE_HOST}:${ETCD_ONE_CLIENT_PORT}
      - --listen-client-urls=http://0.0.0.0:${ETCD_ONE_CLIENT_PORT}
      - --initial-advertise-peer-urls=http://${ETCD_ONE_HOST}:${ETCD_ONE_PEER_PORT}
      - --listen-peer-urls=http://0.0.0.0:${ETCD_ONE_PEER_PORT}
      - --initial-cluster=${GATEWAY_ETCD_INITIAL_CLUSTER}
      - --initial-cluster-state=${GATEWAY_ETCD_INITIAL_CLUSTER_STATE}
      - --initial-cluster-token=${GATEWAY_ETCD_INITIAL_CLUSTER_TOKEN}
    healthcheck:
      test: [ "CMD", "etcdctl", "endpoint", "health" ]
  minio-one:
    image: minio/minio:latest
    deploy:
      replicas: 1
    hostname: ${MINIO_ONE_HOST}
    environment:
      - MINIO_ROOT_USER=${MINIO_ONE_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ONE_ROOT_PASSWORD}
    volumes:
      - ./minio/one/data:/minio
    entrypoint: [ "minio" ]
    command:
      - server
      - /minio
      - --console-address
      - ":${MINIO_ONE_CONSOLE_PORT}"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:${MINIO_ONE_CONSOLE_PORT}/minio/health/live" ]
  zookeeper-one:
    image: bitnami/zookeeper:latest
    hostname: ${ZOOKEEPER_ONE_HOST}
    deploy:
      replicas: 1
    environment:
      - ZOO_PORT_NUMBER=${ZOOKEEPER_ONE_PORT}
      - ZOO_ENABLE_AUTH=yes
      - ZOO_CLIENT_USER=${ZOOKEEPER_ONE_USER}
      - ZOO_CLIENT_PASSWORD=${ZOOKEEPER_ONE_PASSWORD}
    volumes:
      - ./zookeeper/one/data:/bitnami/zookeeper
  kafka-one:
    image: bitnami/kafka:latest
    hostname: ${KAFKA_ONE_HOST}
    deploy:
      replicas: 1
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=${ZOOKEEPER_ONE_HOST}:${ZOOKEEPER_ONE_PORT}
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:${KAFKA_ONE_PORT},
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:${KAFKA_ONE_PORT}
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_ZOOKEEPER_USER=${GATEWAY_ZOOKEEPER_USER}
      - KAFKA_ZOOKEEPER_PASSWORD=${GATEWAY_ZOOKEEPER_PASSWORD}
    volumes:
      - ./kafka/one/data:/bitnami/kafka
    depends_on:
      - zookeeper-one
  kafka-ui-one:
    image: provectuslabs/kafka-ui:latest
    deploy:
      replicas: 1
    hostname: ${KAFKA_UI_ONE_HOST}
    environment:
      - DYNAMIC_CONFIG_ENABLED=true
    volumes:
      - ./kafka-ui/one/data:/etc/kafkaui
    depends_on:
      - kafka-one
  milvus-standalone:
    image: milvusdb/milvus:latest-gpu
    deploy:
      replicas: 1
    hostname: ${MILVUS_STANDALONE_HOST}
    entrypoint: [ "milvus" ]
    command:
      - run
      - standalone
    environment:
      - ETCD_ENDPOINTS=${NGINX_TWO_HOST}:${GATEWAY_ETCD_CLIENT_PORT}
      - MINIO_ADDRESS=${NGINX_TWO_HOST}:${GATEWAY_MINIO_NODE_PORT}
      - MINIO_ACCESS_KEY_ID=${GATEWAY_MINIO_ROOT_USER}
      - MINIO_SECRET_ACCESS_KEY=${GATEWAY_MINIO_ROOT_PASSWORD}
      - KAFKA_ADDRESS=${NGINX_TWO_HOST}:${GATEWAY_KAFKA_PORT}
    volumes:
      - ./milvus/standalone/data:/var/lib/milvus
    depends_on:
      - nginx-two
  clickhouse-one:
    image: clickhouse/clickhouse-server:latest
    hostname: ${CLICKHOUSE_ONE_HOST}
    deploy:
      replicas: 1
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:${CLICKHOUSE_ONE_HTTP_PORT}/ping" ]
    env_file:
      - "./.env"
    volumes:
      - ./clickhouse/one/data:/var/lib/clickhouse
      - ./clickhouse/cluster.xml:/etc/clickhouse-server/config.d/cluster.xml
      #      - ./clickhouse/storage.xml:/etc/clickhouse-server/config.d/storage.xml
      - ./clickhouse/config.xml:/etc/clickhouse-server/config.xml
      - ./clickhouse/users.xml:/etc/clickhouse-server/users.xml
  signoz-query-service:
    build:
      context: ./signoz/query-service
      dockerfile: ./Dockerfile
    hostname: ${SIGNOZ_QUERY_SERVICE_HOST}
    deploy:
      replicas: 1
    entrypoint: [ "/bin/sh", "-c" ]
    command:
      - |-
        envsubst < /root/config/template.prometheus.yml > /root/config/prometheus.yml \
        && \
        ./query-service -config=/root/config/prometheus.yml
    volumes:
      - ./signoz/template.prometheus.yml:/root/config/template.prometheus.yml
      - ./signoz/dashboards:/root/config/dashboards
      - ./signoz/query-service/data:/var/lib/signoz
    environment:
      - ClickHouseUrl=tcp://default:${GATEWAY_CLICKHOUSE_PASSWORD}@${NGINX_TWO_HOST}:${GATEWAY_CLICKHOUSE_TCP_PORT}
      - ALERTMANAGER_API_PREFIX=http://${SIGNOZ_ALERTMANAGER_HOST}:9093/api/
      - SIGNOZ_LOCAL_DB_PATH=/var/lib/signoz/signoz.db
      - DASHBOARDS_PATH=/root/config/dashboards
      - STORAGE=clickhouse
      - GODEBUG=netdns=go
      - TELEMETRY_ENABLED=true
    healthcheck:
      test: [ "CMD","wget", "--spider", "-q","localhost:8080/api/v1/health" ]
    depends_on:
      - nginx-two
  signoz-alertmanager:
    image: signoz/alertmanager:latest
    hostname: ${SIGNOZ_ALERTMANAGER_HOST}
    deploy:
      replicas: 1
    volumes:
      - ./signoz/alertmanager/data:/data
    command: [ "--queryService.url=http://${SIGNOZ_QUERY_SERVICE_HOST}:8085", "--storage.path=/data" ]
    depends_on:
      - signoz-query-service
  signoz-frontend:
    image: signoz/frontend:latest
    hostname: ${SIGNOZ_FRONTEND_HOST}
    deploy:
      replicas: 1
    volumes:
      - ./signoz/common/nginx-config.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - signoz-alertmanager
      - signoz-query-service
  signoz-otel-collector-migrator:
    image: signoz/signoz-schema-migrator:main
    hostname: ${SIGNOZ_OTEL_COLLECTOR_MIGRATOR_HOST}
    command: [ "--dsn=tcp://default:${GATEWAY_CLICKHOUSE_PASSWORD}@${NGINX_TWO_HOST}:${GATEWAY_CLICKHOUSE_TCP_PORT}" ]
    depends_on:
      - nginx-two
  signoz-otel-collector:
    image: signoz/signoz-otel-collector:latest
    command:
      [
        "--config=/etc/config.yaml",
        "--manager-config=/etc/manager-config.yaml",
        "--copy-path=/var/tmp/collector-config.yaml",
        "--feature-gates=-pkg.translator.prometheus.NormalizeName"
      ]
    volumes:
      - ./signoz/otel-collector/config.yaml:/etc/config.yaml
      - ./signoz/otel-collector/opamp-config.yaml:/etc/manager-config.yaml
    depends_on:
      - signoz-otel-collector-migrator
      - signoz-query-service
  #  signoz-logspout:
  #    image: "gliderlabs/logspout:lastest"
  #    hostname: ${SIGNOZ_LOGSPOUT_HOST}
  #    volumes:
  #      - /etc/hostname:/etc/host_hostname:ro
  #      - /var/run/docker.sock:/var/run/docker.sock
  #    command: syslog+tcp://${SIGNOZ_OTEL_COLLECTOR_HOST}:2255
  #    depends_on:
  #      - signoz-otel-collector



