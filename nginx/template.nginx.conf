events {
    # max_connections = worker_processes * worker_connections
    # worker_processes = number of CPU cores
    # worker_connections = max number of connections per worker process
    # if the requests are more than max_connections, the requests will be rejected.
    worker_connections 1024;
}

stream {
#     upstream frontend {
#         server ${FRONTEND_HOST}:${FRONTEND_PORT};
#     }
#
#     upstream backend {
#         server ${BACKEND_HOST}:${BACKEND_PORT};
#     }

    upstream redis {
        server ${REDIS_ONE_HOST}:${REDIS_ONE_PORT};
    }

    upstream cockroachdb_node {
        server ${COCKROACH_ONE_HOST}:${COCKROACH_ONE_NODE_PORT};
    }

    upstream cockroachdb_sql {
        server ${COCKROACH_ONE_HOST}:${COCKROACH_ONE_SQL_PORT};
    }

    upstream cockroachdb_http {
        server ${COCKROACH_ONE_HOST}:${COCKROACH_ONE_HTTP_PORT};
    }

    upstream milvus {
        server ${MILVUS_ONE_HOST}:${MILVUS_ONE_PORT};
    }

#     server {
#         listen ${GATEWAY_FRONTEND_PORT};
#         proxy_pass app;
#     }
#
#     server {
#         listen ${GATEWAY_BACKEND_PORT};
#         proxy_pass backend;
#     }

    server {
        listen ${GATEWAY_REDIS_PORT};
        proxy_pass redis;
    }

    server {
        listen ${GATEWAY_COCKROACH_NODE_PORT};
        proxy_pass cockroachdb_node;
    }

    server {
        listen ${GATEWAY_COCKROACH_SQL_PORT};
        proxy_pass cockroachdb_sql;
    }

    server {
        listen ${GATEWAY_COCKROACH_HTTP_PORT};
        proxy_pass cockroachdb_http;
    }

    server {
        listen ${GATEWAY_MILVUS_PORT};
        proxy_pass milvus;
    }

}
