services:
  frontend:
    image: muazhari/research-assistant-frontend:latest
    deploy:
      replicas: 1
    hostname: ${FRONTEND_HOST}
    ports:
      - '${GATEWAY_FRONTEND_PORT}:${FRONTEND_PORT}'
    entrypoint: [ "/bin/sh", "-c" ]
    command:
      - bun run build && bun run preview --host
    healthcheck:
      test: netstat -tln | grep ${FRONTEND_PORT} || exit 1
    volumes:
      - ./.env:/app/.env
    depends_on:
      - nginx-one
  backend:
    image: muazhari/research-assistant-backend:latest
    hostname: ${BACKEND_HOST}
    ports:
      - '${GATEWAY_BACKEND_PORT}:${BACKEND_PORT}'
    command:
      - python3
      - -m
      - uvicorn
      - apps.main:app
      - --host=0.0.0.0
      - --port=${BACKEND_PORT}
      - --workers=1
    healthcheck:
      test: netstat -tln | grep ${GATEWAY_BACKEND_PORT} || exit 1
    deploy:
      replicas: 1
      resources:
        reservations:
          devices:
            - driver: nvidia
              capabilities: [ "gpu" ]
              count: 1
    volumes:
      - ./.env:/app/.env
      - ${CACHE_PATH}:/root/.cache
      - ${NLTK_DATA_PATH}:/root/nltk_data
    depends_on:
      - nginx-one
  nginx-one:
    image: nginx:latest
    hostname: ${NGINX_ONE_HOST}
    deploy:
      replicas: 1
    ports:
      - '${GATEWAY_REDIS_PORT}:${GATEWAY_REDIS_PORT}'
      - '${GATEWAY_REDIS_INSIGHT_PORT}:${GATEWAY_REDIS_INSIGHT_PORT}'
      - '${GATEWAY_COCKROACH_HTTP_PORT}:${GATEWAY_COCKROACH_HTTP_PORT}'
      - '${GATEWAY_COCKROACH_SQL_PORT}:${GATEWAY_COCKROACH_SQL_PORT}'
      - '${GATEWAY_MILVUS_PORT}:${GATEWAY_MILVUS_PORT}'
      - '${GATEWAY_MILVUS_ATTU_PORT}:${GATEWAY_MILVUS_ATTU_PORT}'
      - '${GATEWAY_MINIO_NODE_PORT}:${GATEWAY_MINIO_NODE_PORT}'
      - '${GATEWAY_MINIO_CONSOLE_PORT}:${GATEWAY_MINIO_CONSOLE_PORT}'
    volumes:
      - ./nginx/one/data:/etc/nginx
      - ./nginx/one/template.nginx.conf:/etc/nginx/template.nginx.conf
    env_file:
      - "./.env"
    entrypoint: [ "/bin/sh", "-c" ]
    command:
      - |-
        envsubst < /etc/nginx/template.nginx.conf > /etc/nginx/nginx.conf \
        && \
        nginx -t \
        && \
        nginx -g "daemon off;"
    healthcheck:
      test: service nginx status || exit 1
    depends_on:
      - cockroach-init
      - milvus-standalone
      - nginx-two
  nginx-two:
    image: nginx:latest
    hostname: ${NGINX_TWO_HOST}
    deploy:
      replicas: 1
    volumes:
      - ./nginx/two/data:/etc/nginx
      - ./nginx/two/template.nginx.conf:/etc/nginx/template.nginx.conf
    env_file:
      - "./.env"
    entrypoint: [ "/bin/sh", "-c" ]
    command:
      - |-
        envsubst < /etc/nginx/template.nginx.conf > /etc/nginx/nginx.conf \
        && \
        nginx -t \
        && \
        nginx -g "daemon off;"
    healthcheck:
      test: service nginx status || exit 1
    depends_on:
      - etcd-one
      - minio-one
      - redis-one
      - cockroach-one
  cockroach-init:
    image: cockroachdb/cockroach:latest
    deploy:
      replicas: 1
    volumes:
      - "../../migration/cockroach:/docker-entrypoint-initdb.d"
    entrypoint: [ "/bin/sh", "-c" ]
    command:
      - |-
        cockroach init --host=${NGINX_TWO_HOST}:${GATEWAY_COCKROACH_NODE_PORT} --insecure \
        && \
        cockroach sql --host=${NGINX_TWO_HOST}:${GATEWAY_COCKROACH_SQL_PORT} --insecure \
        --execute="CREATE ROLE IF NOT EXISTS \"${GATEWAY_COCKROACH_USER}\" WITH LOGIN;" \
        --execute="CREATE DATABASE IF NOT EXISTS \"${GATEWAY_COCKROACH_DATABASE}\";" \
        --execute="GRANT ALL ON DATABASE \"${GATEWAY_COCKROACH_DATABASE}\" TO \"${GATEWAY_COCKROACH_USER}\";" \
        --execute="\c ${GATEWAY_COCKROACH_DATABASE};" \
        --execute="ALTER DEFAULT PRIVILEGES GRANT ALL ON TABLES TO \"${GATEWAY_COCKROACH_USER}\";" \
        --execute="ALTER DEFAULT PRIVILEGES GRANT ALL ON SEQUENCES TO \"${GATEWAY_COCKROACH_USER}\";" \
        && \
        cockroach sql --host=${NGINX_TWO_HOST}:${GATEWAY_COCKROACH_SQL_PORT} --insecure \
        --database=${GATEWAY_COCKROACH_DATABASE} \
        --file=/docker-entrypoint-initdb.d/init.sql
    depends_on:
      - nginx-two
  redis-one:
    image: redis/redis-stack-server:latest
    deploy:
      replicas: 1
    hostname: ${REDIS_ONE_HOST}
    volumes:
      - ./redis/one/data:/data
    environment:
      - REDIS_ARGS=--port ${REDIS_ONE_PORT} --requirepass ${REDIS_ONE_PASSWORD}
  redis-insight-one:
    image: oblakstudio/redisinsight:latest
    deploy:
      replicas: 1
    hostname: ${REDIS_INSIGHT_ONE_HOST}
    volumes:
      - ./redis-insight/one/data:/data
  cockroach-one:
    image: cockroachdb/cockroach:latest
    deploy:
      replicas: 1
    hostname: ${COCKROACH_ONE_HOST}
    volumes:
      - ./cockroach/one/data:/cockroach/cockroach-data
    entrypoint: [ "cockroach" ]
    command:
      - start
      - --advertise-addr=${COCKROACH_ONE_HOST}:${COCKROACH_ONE_NODE_PORT}
      - --http-addr=${COCKROACH_ONE_HOST}:${COCKROACH_ONE_HTTP_PORT}
      - --listen-addr=${COCKROACH_ONE_HOST}:${COCKROACH_ONE_NODE_PORT}
      - --sql-addr=${COCKROACH_ONE_HOST}:${COCKROACH_ONE_SQL_PORT}
      - --join=${COCKROACH_ONE_HOST}:${COCKROACH_ONE_NODE_PORT}
      - --insecure
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:${COCKROACH_ONE_HTTP_PORT}/health?ready=1" ]
  etcd-one:
    image: quay.io/coreos/etcd:latest
    deploy:
      replicas: 1
    hostname: ${ETCD_ONE_HOST}
    volumes:
      - ./etcd/one/data:/etcd
    entrypoint: [ "etcd" ]
    command:
      - --data-dir=/etcd
      - --name=${ETCD_ONE_NAME}
      - --advertise-client-urls=http://${ETCD_ONE_HOST}:${ETCD_ONE_CLIENT_PORT}
      - --listen-client-urls=http://0.0.0.0:${ETCD_ONE_CLIENT_PORT}
      - --initial-advertise-peer-urls=http://${ETCD_ONE_HOST}:${ETCD_ONE_PEER_PORT}
      - --listen-peer-urls=http://0.0.0.0:${ETCD_ONE_PEER_PORT}
      - --initial-cluster=${GATEWAY_ETCD_INITIAL_CLUSTER}
      - --initial-cluster-state=${GATEWAY_ETCD_INITIAL_CLUSTER_STATE}
      - --initial-cluster-token=${GATEWAY_ETCD_INITIAL_CLUSTER_TOKEN}
    healthcheck:
      test: [ "CMD", "etcdctl", "endpoint", "health" ]
  minio-one:
    image: minio/minio:latest
    deploy:
      replicas: 1
    hostname: ${MINIO_ONE_HOST}
    environment:
      - MINIO_ROOT_USER=${MINIO_ONE_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ONE_ROOT_PASSWORD}
    volumes:
      - ./minio/one/data:/minio
    entrypoint: [ "minio" ]
    command:
      - server
      - /minio
      - --console-address
      - ":${MINIO_ONE_CONSOLE_PORT}"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:${MINIO_ONE_CONSOLE_PORT}/minio/health/live" ]
  milvus-standalone:
    image: milvusdb/milvus:latest-gpu
    deploy:
      replicas: 1
      resources:
        reservations:
          devices:
            - driver: nvidia
              capabilities: [ "gpu" ]
              count: 1
    hostname: ${MILVUS_STANDALONE_HOST}
    entrypoint: [ "milvus" ]
    command:
      - run
      - standalone
    environment:
      - BIND_PORT=${MILVUS_STANDALONE_PORT}
      - ETCD_ENDPOINTS=${NGINX_TWO_HOST}:${GATEWAY_ETCD_CLIENT_PORT}
      - MINIO_ADDRESS=${NGINX_TWO_HOST}:${GATEWAY_MINIO_NODE_PORT}
      - MINIO_ACCESS_KEY_ID=${GATEWAY_MINIO_ROOT_USER}
      - MINIO_SECRET_ACCESS_KEY=${GATEWAY_MINIO_ROOT_PASSWORD}
    volumes:
      - ./milvus/standalone/data:/var/lib/milvus
    depends_on:
      - nginx-two
  milvus-attu-one:
    image: zilliz/attu:latest
    deploy:
      replicas: 1
    hostname: ${MILVUS_ATTU_ONE_HOST}
    environment:
      - MILVUS_URL=${MILVUS_STANDALONE_HOST}:${GATEWAY_MILVUS_PORT}
  infinity-one:
    image: michaelf34/infinity:latest
    deploy:
      replicas: 1
      resources:
        reservations:
          devices:
            - driver: nvidia
              capabilities: [ "gpu" ]
              count: 1
    hostname: ${INFINITY_ONE_HOST}
    entrypoint: [ "infinity_emb" ]
    command:
      - --model-name-or-path=${INFINITY_ONE_MODEL_NAME}
      - --port=${INFINITY_ONE_PORT}
    environment:
      - SENTENCE_TRANSFORMERS_HOME=/root/.cache/huggingface/hub
    volumes:
      - ${CACHE_PATH}:/root/.cache



